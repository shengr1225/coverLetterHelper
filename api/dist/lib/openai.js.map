{
  "version": 3,
  "sources": ["../../src/lib/openai.ts"],
  "sourcesContent": ["import OpenAI from 'openai'\n\nconst openai = new OpenAI({\n  apiKey: process.env.CHATGPT_KEY,\n  organization: 'org-i5rE8cAdISQ4NB4qFrXLKjeK',\n})\n\nexport const findOrCreateAssistant = async (id) => {\n  let assistant = await openai.beta.assistants.retrieve(id)\n\n  if (!assistant) {\n    const params: OpenAI.Beta.AssistantCreateParams = {\n      name: 'Cover letter helper',\n      instructions:\n        'You are a helpful ChatGPT that generate cover letter based on resume, company description and job description.' +\n        'During the process, please follow principles below: ' +\n        '1. The personality is professional with normal words ' +\n        '2. Specific how my experience aligns with the job description ' +\n        '3. Explain one thing that attract me of the company',\n      model: 'gpt-4-turbo',\n    }\n\n    assistant = await openai.beta.assistants.create(params)\n  }\n\n  return assistant.id\n}\n\nexport const createThreadAndAddMessage = async (body) => {\n  let thread\n  if (body.threadId) {\n    thread = await openai.beta.threads.retrieve(body.threadId)\n  } else {\n    thread = await openai.beta.threads.create()\n  }\n  openai.beta.threads.messages.create(thread.id, {\n    role: 'user',\n    content: 'here is the updated job description: ' + body.aboutJob,\n  })\n  openai.beta.threads.messages.create(thread.id, {\n    role: 'user',\n    content: 'here is the updated company description: ' + body.aboutCompany,\n  })\n  openai.beta.threads.messages.create(thread.id, {\n    role: 'user',\n    content: 'here is my updated resume: ' + body.resume,\n  })\n  console.log('thread id: ' + thread.id)\n  return thread.id\n}\n\nexport const waitForThread = async (threadId, assistantId) => {\n  const run = await openai.beta.threads.runs.create(threadId, {\n    assistant_id: assistantId,\n  })\n\n  const waitForRun = (run) => {\n    return new Promise((resolve, reject) => {\n      const id = setInterval(async () => {\n        const status = (\n          await openai.beta.threads.runs.retrieve(threadId, run.id)\n        ).status\n        console.log(status)\n        if (status === 'completed') {\n          clearInterval(id)\n          resolve('completed')\n        }\n      }, 1000)\n    })\n  }\n\n  return waitForRun(run)\n}\n\nexport const listMessage = async (threadId) => {\n  const message = await openai.beta.threads.messages.list(threadId)\n  return message\n}\n\nexport const chatCompletion = async (body) => {\n  const params: OpenAI.Chat.ChatCompletionCreateParams = {\n    messages: [\n      {\n        role: 'system',\n        content:\n          'You are a helpful ChatGPT that generate cover letter based on resume, company description and job description.' +\n          'During the process, please follow principles below: ' +\n          '1. The personality is professional with normal words ' +\n          '2. Specific how my experience aligns with the job description ' +\n          '3. Explain one thing that attract me of the company',\n      },\n      {\n        role: 'user',\n        content: 'here is the job describtion: ' + body.aboutJob,\n      },\n      {\n        role: 'user',\n        content: 'here is the company describtion: ' + body.aboutCompany,\n      },\n      { role: 'user', content: 'here is my resume: ' + body.resume },\n    ],\n    model: 'gpt-3.5-turbo',\n    stream: true,\n    temperature: 1.2,\n  }\n\n  const stream = await openai.chat.completions.create(params)\n  return stream\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,oBAAmB;AAEnB,MAAMA,SAAS,IAAIC,cAAAA,QAAO;EACxBC,QAAQC,QAAQC,IAAIC;EACpBC,cAAc;AAChB,CAAC;AAEM,MAAMC,wBAAwB,OAAOC,OAAO;AACjD,MAAIC,YAAY,MAAMT,OAAOU,KAAKC,WAAWC,SAASJ,EAAE;AAExD,MAAI,CAACC,WAAW;AACd,UAAMI,SAA4C;MAChDC,MAAM;MACNC,cACE;MAKFC,OAAO;IACT;AAEAP,gBAAY,MAAMT,OAAOU,KAAKC,WAAWM,OAAOJ,MAAM;EACxD;AAEA,SAAOJ,UAAUD;AACnB;AAEO,MAAMU,4BAA4B,OAAOC,SAAS;AACvD,MAAIC;AACJ,MAAID,KAAKE,UAAU;AACjBD,aAAS,MAAMpB,OAAOU,KAAKY,QAAQV,SAASO,KAAKE,QAAQ;EAC3D,OAAO;AACLD,aAAS,MAAMpB,OAAOU,KAAKY,QAAQL,OAAO;EAC5C;AACAjB,SAAOU,KAAKY,QAAQC,SAASN,OAAOG,OAAOZ,IAAI;IAC7CgB,MAAM;IACNC,SAAS,0CAA0CN,KAAKO;EAC1D,CAAC;AACD1B,SAAOU,KAAKY,QAAQC,SAASN,OAAOG,OAAOZ,IAAI;IAC7CgB,MAAM;IACNC,SAAS,8CAA8CN,KAAKQ;EAC9D,CAAC;AACD3B,SAAOU,KAAKY,QAAQC,SAASN,OAAOG,OAAOZ,IAAI;IAC7CgB,MAAM;IACNC,SAAS,gCAAgCN,KAAKS;EAChD,CAAC;AACDC,UAAQC,IAAI,gBAAgBV,OAAOZ,EAAE;AACrC,SAAOY,OAAOZ;AAChB;AAEO,MAAMuB,gBAAgB,OAAOV,UAAUW,gBAAgB;AAC5D,QAAMC,MAAM,MAAMjC,OAAOU,KAAKY,QAAQY,KAAKjB,OAAOI,UAAU;IAC1Dc,cAAcH;EAChB,CAAC;AAED,QAAMI,aAAcH,CAAAA,SAAQ;AAC1B,WAAO,IAAAI,eAAAA,QAAY,CAACC,SAASC,WAAW;AACtC,YAAM/B,SAAKgC,oBAAAA,SAAY,YAAY;AACjC,cAAMC,UACJ,MAAMzC,OAAOU,KAAKY,QAAQY,KAAKtB,SAASS,UAAUY,KAAIzB,EAAE,GACxDiC;AACFZ,gBAAQC,IAAIW,MAAM;AAClB,YAAIA,WAAW,aAAa;AAC1BC,wBAAclC,EAAE;AAChB8B,kBAAQ,WAAW;QACrB;MACF,GAAG,GAAI;IACT,CAAC;EACH;AAEA,SAAOF,WAAWH,GAAG;AACvB;AAEO,MAAMU,cAAc,OAAOtB,aAAa;AAC7C,QAAMuB,UAAU,MAAM5C,OAAOU,KAAKY,QAAQC,SAASsB,KAAKxB,QAAQ;AAChE,SAAOuB;AACT;AAEO,MAAME,iBAAiB,OAAO3B,SAAS;AAC5C,QAAMN,SAAiD;IACrDU,UAAU,CACR;MACEC,MAAM;MACNC,SACE;IAKJ,GACA;MACED,MAAM;MACNC,SAAS,kCAAkCN,KAAKO;IAClD,GACA;MACEF,MAAM;MACNC,SAAS,sCAAsCN,KAAKQ;IACtD,GACA;MAAEH,MAAM;MAAQC,SAAS,wBAAwBN,KAAKS;IAAO,CAAC;IAEhEZ,OAAO;IACP+B,QAAQ;IACRC,aAAa;EACf;AAEA,QAAMD,SAAS,MAAM/C,OAAOiD,KAAKC,YAAYjC,OAAOJ,MAAM;AAC1D,SAAOkC;AACT;",
  "names": ["openai", "OpenAI", "apiKey", "process", "env", "CHATGPT_KEY", "organization", "findOrCreateAssistant", "id", "assistant", "beta", "assistants", "retrieve", "params", "name", "instructions", "model", "create", "createThreadAndAddMessage", "body", "thread", "threadId", "threads", "messages", "role", "content", "aboutJob", "aboutCompany", "resume", "console", "log", "waitForThread", "assistantId", "run", "runs", "assistant_id", "waitForRun", "_Promise", "resolve", "reject", "_setInterval", "status", "clearInterval", "listMessage", "message", "list", "chatCompletion", "stream", "temperature", "chat", "completions"]
}
