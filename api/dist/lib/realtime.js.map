{
  "version": 3,
  "sources": ["../../src/lib/realtime.ts"],
  "sourcesContent": ["import { RedwoodRealtimeOptions } from '@redwoodjs/realtime'\n\nimport subscriptions from 'src/subscriptions/**/*.{js,ts}'\n\n// if using a Redis store\n// import { Redis } from 'ioredis'\n// const publishClient = new Redis()\n// const subscribeClient = new Redis()\n\n/**\n * Configure RedwoodJS Realtime\n *\n * See https://redwoodjs.com/docs/realtime\n *\n * Realtime supports Live Queries and Subscriptions over GraphQL SSE.\n *\n * Live Queries are GraphQL queries that are automatically re-run when the data they depend on changes.\n *\n * Subscriptions are GraphQL queries that are run when a client subscribes to a channel.\n *\n * Redwood Realtime\n *  - uses a publish/subscribe model to broadcast data to clients.\n *  - uses a store to persist Live Query and Subscription data.\n *  - and enable defer and stream directives to improve latency\n *    for clients by sending data the most important data as soon as it's ready.\n *\n * Redwood Realtime supports in-memory and Redis stores:\n * - In-memory stores are useful for development and testing.\n * - Redis stores are useful for production.\n *\n */\nexport const realtime: RedwoodRealtimeOptions = {\n  subscriptions: {\n    subscriptions,\n    store: 'in-memory',\n    // if using a Redis store\n    // store: { redis: { publishClient, subscribeClient } },\n  },\n  liveQueries: {\n    store: 'in-memory',\n    // if using a Redis store\n    // store: { redis: { publishClient, subscribeClient } },\n  },\n  // To enable defer and streaming, set to true.\n  enableDeferStream: true,\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BO,MAAMA,WAAmC;EAC9CC,eAAe;IACbA;IACAC,OAAO;;;EAGT;EACAC,aAAa;IACXD,OAAO;;;EAGT;;EAEAE,mBAAmB;AACrB;",
  "names": ["realtime", "subscriptions", "store", "liveQueries", "enableDeferStream"]
}
