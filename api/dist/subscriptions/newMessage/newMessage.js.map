{
  "version": 3,
  "sources": ["../../../src/subscriptions/newMessage/newMessage.ts"],
  "sourcesContent": ["import gql from 'graphql-tag'\n\nimport type { PubSub } from '@redwoodjs/realtime'\n\nimport { logger } from 'src/lib/logger'\n\nexport const schema = gql`\n  type Subscription {\n    newMessage(roomId: ID!): Message! @requireAuth\n  }\n`\nexport type NewMessageChannel = {\n  newMessage: [roomId: string, payload: { from: string; body: string }]\n}\n\nexport type NewMessageChannelType = PubSub<NewMessageChannel>\n\n/**\n * To test this NewMessage subscription, run the following in one GraphQL Playground to subscribe:\n *\n * subscription ListenForNewMessagesInRoom {\n *   newMessage(roomId: \"1\") {\n *     body\n *     from\n *   }\n * }\n *\n *\n * And run the following in another GraphQL Playground to publish and send a message to the room:\n *\n * mutation SendMessageToRoom {\n *   sendMessage(input: {roomId: \"1\", from: \"hello\", body: \"bob\"}) {\n *     body\n *     from\n *   }\n * }\n */\nconst newMessage = {\n  newMessage: {\n    subscribe: (\n      _,\n      { roomId },\n      { pubSub }: { pubSub: NewMessageChannelType }\n    ) => {\n      logger.debug({ roomId }, 'newMessage subscription')\n\n      return pubSub.subscribe('newMessage', roomId)\n    },\n    resolve: (payload) => {\n      logger.debug({ payload }, 'newMessage subscription resolve')\n\n      return payload\n    },\n  },\n}\n\nexport default newMessage\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAIA;;;;;;oBAAe;AAER,MAAMA,SAAM;EAAA,QAAA;EAAA,eAAA,CAAA;IAAA,QAAA;IAAA,QAAA;MAAA,QAAA;MAAA,SAAA;IAAA;IAAA,cAAA,CAAA;IAAA,cAAA,CAAA;IAAA,UAAA,CAAA;MAAA,QAAA;MAAA,QAAA;QAAA,QAAA;QAAA,SAAA;MAAA;MAAA,aAAA,CAAA;QAAA,QAAA;QAAA,QAAA;UAAA,QAAA;UAAA,SAAA;QAAA;QAAA,QAAA;UAAA,QAAA;UAAA,QAAA;YAAA,QAAA;YAAA,QAAA;cAAA,QAAA;cAAA,SAAA;YAAA;UAAA;QAAA;QAAA,cAAA,CAAA;MAAA,CAAA;MAAA,QAAA;QAAA,QAAA;QAAA,QAAA;UAAA,QAAA;UAAA,QAAA;YAAA,QAAA;YAAA,SAAA;UAAA;QAAA;MAAA;MAAA,cAAA,CAAA;QAAA,QAAA;QAAA,QAAA;UAAA,QAAA;UAAA,SAAA;QAAA;QAAA,aAAA,CAAA;MAAA,CAAA;IAAA,CAAA;EAAA,CAAA;EAAA,OAAA;IAAA,SAAA;IAAA,OAAA;IAAA,UAAA;MAAA,QAAA;MAAA,QAAA;MAAA,kBAAA;QAAA,QAAA;QAAA,UAAA;MAAA;IAAA;EAAA;AAAA;AA+BnB,MAAMC,aAAa;EACjBA,YAAY;IACVC,WAAWA,CACTC,GACA;MAAEC;IAAO,GACT;MAAEC;IAA0C,MACzC;AACHC,2BAAOC,MAAM;QAAEH;MAAO,GAAG,yBAAyB;AAElD,aAAOC,OAAOH,UAAU,cAAcE,MAAM;IAC9C;IACAI,SAAUC,aAAY;AACpBH,2BAAOC,MAAM;QAAEE;MAAQ,GAAG,iCAAiC;AAE3D,aAAOA;IACT;EACF;AACF;AAEA,IAAA,qBAAeR;",
  "names": ["schema", "newMessage", "subscribe", "_", "roomId", "pubSub", "logger", "debug", "resolve", "payload"]
}
