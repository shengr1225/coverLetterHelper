{
  "version": 3,
  "sources": ["../../../src/services/auctions/auctions.ts"],
  "sourcesContent": ["// api/src/services/auctions/auctions.ts\nimport type { LiveQueryStorageMechanism } from '@redwoodjs/realtime'\n\nimport { logger } from 'src/lib/logger'\n\nconst auctions = [\n  { id: '1', title: 'RedwoodJS Logo Shirt', bids: [{ amount: 20 }] },\n  { id: '2', title: 'RedwoodJS Lapel Pin', bids: [{ amount: 5 }] },\n  { id: '3', title: 'RedwoodJS Beanie', bids: [{ amount: 15 }] },\n  { id: '4', title: 'RedwoodJS Dad Hat', bids: [{ amount: 20 }] },\n  { id: '5', title: 'RedwoodJS Skater Hat', bids: [{ amount: 20 }] },\n]\n\n/**\n * To test this live query, run the following in the GraphQL Playground:\n *\n * query GetCurrentAuctionBids @live {\n *  auction(id: \"1\") {\n *    bids {\n *      amount\n *    }\n *    highestBid {\n *      amount\n *    }\n *    id\n *    title\n *   }\n * }\n *\n * And then make a bid with the following mutation:\n *\n * mutation MakeBid {\n *   bid(input: {auctionId: \"1\", amount: 10}) {\n *     amount\n *   }\n * }\n */\nexport const auction = async ({ id }) => {\n  const foundAuction = auctions.find((a) => a.id === id)\n  logger.debug({ id, auction: foundAuction }, 'auction')\n  return foundAuction\n}\n\nexport const bid = async (\n  { input },\n  { context }: { context: { liveQueryStore: LiveQueryStorageMechanism } }\n) => {\n  const { auctionId, amount } = input\n\n  const index = auctions.findIndex((a) => a.id === auctionId)\n\n  const bid = { amount }\n\n  auctions[index].bids.push(bid)\n  logger.debug({ auctionId, bid }, 'Added bid to auction')\n\n  const key = `Auction:${auctionId}`\n  context.liveQueryStore.invalidate(key)\n\n  logger.debug({ key }, 'Invalidated auction key in liveQueryStore')\n\n  return bid\n}\n\nexport const Auction = {\n  highestBid: (obj, { root }) => {\n    const [max] = root.bids.sort((a, b) => b.amount - a.amount)\n\n    logger.debug({ obj, root }, 'highestBid')\n\n    return max\n  },\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,oBAAe;AAEf,MAAMA,WAAW,CACf;EAAEC,IAAI;EAAKC,OAAO;EAAwBC,MAAM,CAAC;IAAEC,QAAQ;EAAG,CAAC;AAAE,GACjE;EAAEH,IAAI;EAAKC,OAAO;EAAuBC,MAAM,CAAC;IAAEC,QAAQ;EAAE,CAAC;AAAE,GAC/D;EAAEH,IAAI;EAAKC,OAAO;EAAoBC,MAAM,CAAC;IAAEC,QAAQ;EAAG,CAAC;AAAE,GAC7D;EAAEH,IAAI;EAAKC,OAAO;EAAqBC,MAAM,CAAC;IAAEC,QAAQ;EAAG,CAAC;AAAE,GAC9D;EAAEH,IAAI;EAAKC,OAAO;EAAwBC,MAAM,CAAC;IAAEC,QAAQ;EAAG,CAAC;AAAE,CAAC;AA2B7D,MAAMC,UAAU,OAAO;EAAEJ;AAAG,MAAM;AACvC,QAAMK,mBAAeC,YAAAA,SAAAP,QAAQ,EAAAQ,KAARR,UAAeS,OAAMA,EAAER,OAAOA,EAAE;AACrDS,uBAAOC,MAAM;IAAEV;IAAII,SAASC;EAAa,GAAG,SAAS;AACrD,SAAOA;AACT;AAEO,MAAMM,MAAM,OACjB;EAAEC;AAAM,GACR;EAAEC;AAAoE,MACnE;AACH,QAAM;IAAEC;IAAWX;EAAO,IAAIS;AAE9B,QAAMG,YAAQC,kBAAAA,SAAAjB,QAAQ,EAAAQ,KAARR,UAAoBS,OAAMA,EAAER,OAAOc,SAAS;AAE1D,QAAMH,OAAM;IAAER;EAAO;AAErBJ,WAASgB,KAAK,EAAEb,KAAKe,KAAKN,IAAG;AAC7BF,uBAAOC,MAAM;IAAEI;IAAWH,KAAAA;EAAI,GAAG,sBAAsB;AAEvD,QAAMO,MAAM,WAAWJ,SAAS;AAChCD,UAAQM,eAAeC,WAAWF,GAAG;AAErCT,uBAAOC,MAAM;IAAEQ;EAAI,GAAG,2CAA2C;AAEjE,SAAOP;AACT;AAEO,MAAMU,UAAU;EACrBC,YAAYA,CAACC,KAAK;IAAEC;EAAK,MAAM;AAAA,QAAAC;AAC7B,UAAM,CAACC,GAAG,QAAIC,YAAAA,SAAAF,WAAAD,KAAKtB,IAAI,EAAAK,KAAAkB,UAAM,CAACjB,GAAGoB,MAAMA,EAAEzB,SAASK,EAAEL,MAAM;AAE1DM,yBAAOC,MAAM;MAAEa;MAAKC;IAAK,GAAG,YAAY;AAExC,WAAOE;EACT;AACF;",
  "names": ["auctions", "id", "title", "bids", "amount", "auction", "foundAuction", "_findInstanceProperty", "call", "a", "logger", "debug", "bid", "input", "context", "auctionId", "index", "_findIndexInstanceProperty", "push", "key", "liveQueryStore", "invalidate", "Auction", "highestBid", "obj", "root", "_context", "max", "_sortInstanceProperty", "b"]
}
